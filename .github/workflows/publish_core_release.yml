name: Publish Core Release

on:
  workflow_dispatch: # Allow manually triggering this workflow
  release:
    # We'll run this workflow when a new GitHub release is created
    types: [ released ]
env:
  VERSION_FILE_NAME: core_version.txt
  VERSION_REPLACE_PATTERN: '"version": "\1",'
jobs:
  publish:
    name: Release build and publish
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Generate versions
        uses: HardNorth/github-version-generate@v1.1.1
        with:
          version-source: file
          version-file: ${{ env.VERSION_FILE_NAME }}
          release-version-cut-prerelease: ${{ true }}
          next-version-increment-patch: ${{ true }}
          next-version-increment-minor: ${{ false }}
          next-version-increment-major: ${{ false }}

        # Builds the release artifacts of the library
      - name: Release build for core
        run: ./gradlew :core:assembleRelease

        # Generates other artifacts
      - name: Source jar
        run: ./gradlew sourcesJar

        # Runs upload, and then closes & releases the repository
#      - name: Publish to Core to Sonatype
#        run: ./gradlew publishCorePublicationToSonatypeRepository --max-workers 1
#        env:
#          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
#          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
#          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
#          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}

      - name: Update version file
        id: versionFileUpdate
        run: |
          export CURRENT_VERSION_VALUE=`echo '${{ env.CURRENT_VERSION }}' | sed -E 's/(.*)/${{ env.VERSION_REPLACE_PATTERN }}/'`
          export NEXT_VERSION_VALUE=`echo '${{ env.NEXT_VERSION }}' | sed -E 's/(.*)/${{ env.VERSION_REPLACE_PATTERN }}/'`
          sed "s/${CURRENT_VERSION_VALUE}/${NEXT_VERSION_VALUE}/g" ${{ env.VERSION_FILE }} > ${{ env.VERSION_FILE }}${{ env.TMP_SUFFIX }}
          rm ${{ env.VERSION_FILE }}
          mv ${{ env.VERSION_FILE }}${{ env.TMP_SUFFIX }} ${{ env.VERSION_FILE }}
          git add ${{ env.VERSION_FILE }}
          git commit -m "Version update"
          git push
